type shippingAmount = record {shipping_amount: float64;};
type WishlistItem = 
 record {
   id: WishlistId;
   "principal": principal;
   product_slug: text;
   time_created: Time;
   time_updated: Time;
 };
type WishlistId = text;
type Variants = 
 record {
   color: text;
   inventory: nat;
   product_slug: SlugId;
   size: text;
   variant_price: float64;
   variant_sale_price: float64;
   variant_slug: SlugId;
 };
type VariantSize = record {size: text;};
type VariantColor = 
 record {
   color: text;
   img1: text;
   img2: text;
   img3: text;
   inventory: nat;
   variant_price: float64;
   variant_sale_price: float64;
 };
type UserProduct = 
 record {
   active: bool;
   category: SlugId;
   description: text;
   newArrival: bool;
   title: text;
   trending: bool;
 };
type UserContact = 
 record {
   contact_number: text;
   email: text;
   message: text;
   name: text;
 };
type UserAddress = 
 record {
   address_type: text;
   addressline1: text;
   addressline2: text;
   city: text;
   country: text;
   email: text;
   firstname: text;
   lastname: text;
   phone_number: text;
   pincode: text;
   state: text;
 };
type User = 
 record {
   email: text;
   firstName: text;
   id: principal;
   lastName: text;
 };
type UpdatepaymentStatusError = 
 variant {
   OrderNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type UpdateWishlistItemError = 
 variant {
   UserNotAdmin;
   UserNotAuthenticated;
   WishlistItemNotFound;
 };
type UpdateVariantError = 
 variant {
   EmptyColor;
   EmptyProductSlug;
   EmptySize;
   ProductSlugNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
   VariantNotFound;
 };
type UpdateUserError = 
 variant {
   EmptyEmail;
   EmptyFirstName;
   EmptyLastName;
   UserNotAuthenticated;
   UserNotFound;
 };
type UpdateProductError = 
 variant {
   EmptyTitle;
   ProductNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type UpdateOrderError = 
 variant {
   OrderNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type UpdateContactError = 
 variant {
   ContactNotFound;
   EmptyEmail;
   EmptyMessage;
   EmptyName;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type UpdateCategoryError = 
 variant {
   CategoryNotFound;
   EmptyName;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type UpdateCartItemsError = 
 variant {
   CartItemNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type UpdateAddressError = 
 variant {
   AddressNotFound;
   EmptyAddressLine1;
   EmptyCity;
   EmptyCountry;
   EmptyEmail;
   EmptyFirstName;
   EmptyLastName;
   EmptyPhoneNumber;
   EmptyPincode;
   EmptyState;
   UserNotAuthenticated;
 };
type Time = int;
type StatisticalDetail = 
 record {
   totalCategories: nat;
   totalContacts: nat;
   totalOrders: nat;
   totalProducts: nat;
   totalUsers: nat;
 };
type SlugId = text;
type Result_9 = 
 variant {
   err: UpdateAddressError;
   ok: Address;
 };
type Result_8 = 
 variant {
   err: UpdateCartItemsError;
   ok: CartItem;
 };
type Result_7 = 
 variant {
   err: UpdateCategoryError;
   ok: Category;
 };
type Result_6 = 
 variant {
   err: UpdateContactError;
   ok: Contact;
 };
type Result_5 = 
 variant {
   err: UpdatepaymentStatusError;
   ok: Order;
 };
type Result_4 = 
 variant {
   err: UpdateProductError;
   ok: Product;
 };
type Result_33 = 
 variant {
   err: CreateCartItemsError;
   ok: CartItem;
 };
type Result_32 = 
 variant {
   err: CreateWishlistItemError;
   ok: WishlistItem;
 };
type Result_31 = 
 variant {
   err: CreateAddressError;
   ok: Address;
 };
type Result_30 = 
 variant {
   err: CreateCategoryError;
   ok: Category;
 };
type Result_3 = 
 variant {
   err: UpdateOrderError;
   ok: Order;
 };
type Result_29 = 
 variant {
   err: CreateContactError;
   ok: Contact;
 };
type Result_28 = 
 variant {
   err: CreateProductError;
   ok: Product;
 };
type Result_27 = 
 variant {
   err: CreateVariantError;
   ok: Variants;
 };
type Result_26 = 
 variant {
   err: DeleteCartItemsError;
   ok;
 };
type Result_25 = 
 variant {
   err: DeleteCategoryError;
   ok;
 };
type Result_24 = 
 variant {
   err: DeleteContactError;
   ok;
 };
type Result_23 = 
 variant {
   err: DeleteOrderError;
   ok;
 };
type Result_22 = 
 variant {
   err: DeleteProductError;
   ok;
 };
type Result_21 = 
 variant {
   err: DeleteWishlistItemError;
   ok;
 };
type Result_20 = 
 variant {
   err: DeleteAddressError;
   ok;
 };
type Result_2 = 
 variant {
   err: UpdateUserError;
   ok: User;
 };
type Result_19 = 
 variant {
   err: DeleteVariantError;
   ok;
 };
type Result_18 = 
 variant {
   err: GetAddressError;
   ok: Address;
 };
type Result_17 = 
 variant {
   err: GetCategoryError;
   ok: Category;
 };
type Result_16 = 
 variant {
   err: GetContactError;
   ok: Contact;
 };
type Result_15 = 
 variant {
   err: OrderError;
   ok: Order;
 };
type Result_14 = 
 variant {
   err: GetProductError;
   ok: Product;
 };
type Result_13 = 
 variant {
   err: GetUserError;
   ok: User;
 };
type Result_12 = 
 variant {
   err: GetPaymentStatusError;
   ok: text;
 };
type Result_11 = 
 variant {
   err: GetStatisticalDetailError;
   ok: StatisticalDetail;
 };
type Result_10 = 
 variant {
   err: GetVariantError;
   ok: Variants;
 };
type Result_1 = 
 variant {
   err: UpdateWishlistItemError;
   ok: WishlistItem;
 };
type Result = 
 variant {
   err: UpdateVariantError;
   ok: Variants;
 };
type ProductId = nat;
type Product = 
 record {
   active: bool;
   category: SlugId;
   description: text;
   id: ProductId;
   newArrival: bool;
   slug: SlugId;
   time_created: Time;
   time_updated: Time;
   title: text;
   trending: bool;
   variantColor: vec VariantColor;
   variantSize: vec VariantSize;
 };
type OrderProduct = 
 record {
   color: text;
   id: text;
   img: text;
   quantity: nat8;
   sale_price: float64;
   size: text;
   title: text;
 };
type OrderId = text;
type OrderError = 
 variant {
   MissingData;
   OrderNotFound;
   PaymentAddressAlreadyUsed;
   UnableToCreate;
   UnableToUpdate;
   UserNotAuthenticated;
 };
type Order = 
 record {
   awb: text;
   id: OrderId;
   orderStatus: text;
   paymentAddress: text;
   paymentMethod: text;
   paymentStatus: text;
   products: vec OrderProduct;
   shippingAddress: Address;
   shippingAmount: shippingAmount;
   subTotalAmount: float64;
   timeCreated: Time;
   timeUpdated: Time;
   totalAmount: float64;
   userid: principal;
 };
type NewOrder = 
 record {
   awb: text;
   orderStatus: text;
   paymentAddress: text;
   paymentMethod: text;
   paymentStatus: text;
   products: vec OrderProduct;
   shippingAddress: Address;
   shippingAmount: shippingAmount;
   subTotalAmount: float64;
   totalAmount: float64;
   userid: principal;
 };
type GetVariantError = variant {VariantNotFound;};
type GetUserError = variant {UserNotFound;};
type GetStatisticalDetailError = variant {UserNotAdmin;};
type GetProductError = variant {ProductNotFound;};
type GetPaymentStatusError = variant {OrderNotFound;};
type GetContactError = 
 variant {
   ContactNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type GetCategoryError = variant {CategoryNotFound;};
type GetAddressError = variant {AddressNotFound;};
type DeleteWishlistItemError = 
 variant {
   UserNotAdmin;
   UserNotAuthenticated;
 };
type DeleteVariantError = 
 variant {
   UserNotAdmin;
   UserNotAuthenticated;
   VariantNotFound;
 };
type DeleteProductError = 
 variant {
   UserNotAdmin;
   UserNotAuthenticated;
 };
type DeleteOrderError = 
 variant {
   OrderNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type DeleteContactError = 
 variant {
   UserNotAdmin;
   UserNotAuthenticated;
 };
type DeleteCategoryError = 
 variant {
   UserNotAdmin;
   UserNotAuthenticated;
 };
type DeleteCartItemsError = 
 variant {
   UserNotAdmin;
   UserNotAuthenticated;
 };
type DeleteAddressError = 
 variant {
   AddressNotFound;
   UserNotAuthenticated;
 };
type CreateWishlistItemError = 
 variant {
   EmptyProductSlug;
   UserNotAdmin;
   UserNotAuthenticated;
   WishlistItemAlreadyExists;
 };
type CreateVariantError = 
 variant {
   EmptyColor;
   EmptyProductSlug;
   EmptySize;
   ProductSlugNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
   VariantSlugAlreadyExists;
 };
type CreateProductError = 
 variant {
   EmptyTitle;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type CreateContactError = 
 variant {
   EmptyEmail;
   EmptyMessage;
   EmptyName;
 };
type CreateCategoryError = 
 variant {
   CategoryAlreadyExists;
   EmptyName;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type CreateCartItemsError = 
 variant {
   EmptyColor;
   EmptyProductSlug;
   EmptySize;
   ProductSlugAlreadyExists;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type CreateAddressError = 
 variant {
   EmptyAddressLine1;
   EmptyCity;
   EmptyCountry;
   EmptyEmail;
   EmptyFirstName;
   EmptyLastName;
   EmptyPhoneNumber;
   EmptyPincode;
   EmptyState;
   UserNotAuthenticated;
 };
type ContactId = text;
type Contact = 
 record {
   contact_number: text;
   email: text;
   id: ContactId;
   message: text;
   name: text;
   time_created: Time;
   time_updated: Time;
 };
type Category = 
 record {
   active: bool;
   category_img: text;
   featured: bool;
   name: text;
   slug: SlugId;
 };
type CartItem = 
 record {
   color: text;
   id: CartId;
   "principal": principal;
   product_slug: text;
   quantity: nat8;
   size: text;
   time_created: Time;
   time_updated: Time;
 };
type CartId = text;
type Address = 
 record {
   address_type: text;
   addressline1: text;
   addressline2: text;
   city: text;
   country: text;
   email: text;
   firstname: text;
   id: text;
   lastname: text;
   phone_number: text;
   pincode: text;
   state: text;
 };
service : {
  addtoCartItems: (text, text, text, nat8) -> (Result_33);
  addtoWishlist: (text) -> (Result_32);
  clearallcartitmesbyprincipal: () -> (Result_26);
  createAddress: (UserAddress) -> (Result_31);
  createCategory: (text, text, bool, bool) -> (Result_30);
  createContact: (UserContact) -> (Result_29);
  createOrder: (NewOrder) -> (Result_15);
  createProduct: (UserProduct, vec VariantSize, vec VariantColor) ->
   (Result_28);
  createVariant: (SlugId, text, text, nat, float64, float64) -> (Result_27);
  deleteCartItems: (CartId) -> (Result_26);
  deleteCategory: (SlugId) -> (Result_25);
  deleteContact: (ContactId) -> (Result_24);
  deleteOrder: (OrderId) -> (Result_23);
  deleteProduct: (SlugId) -> (Result_22);
  deleteWishlistItems: (WishlistId) -> (Result_21);
  deleteaddress: (text) -> (Result_20);
  deletevariant: (SlugId) -> (Result_19);
  getAddress: (text) -> (Result_18);
  getCallerCartItems: () -> (vec record {
                                   CartId;
                                   CartItem;
                                 }) query;
  getCategory: (SlugId) -> (Result_17) query;
  getContact: (ContactId) -> (Result_16) query;
  getOrder: (text) -> (Result_15) query;
  getProduct: (SlugId) -> (Result_14) query;
  getUserdetailsbycaller: () -> (Result_13) query;
  getUserdetailsbyid: (principal) -> (Result_13) query;
  getpaymentstatus: () -> (Result_12);
  getstatisticaldetailforadmin: () -> (Result_11);
  getvariant: (SlugId) -> (Result_10);
  isAdmin: (principal) -> (bool);
  listCategories: () -> (vec record {
                               SlugId;
                               Category;
                             }) query;
  listContacts: () -> (vec record {
                             ContactId;
                             Contact;
                           }) query;
  listUserAddresses: () -> (vec record {
                                  principal;
                                  vec Address;
                                }) query;
  listUserOrders: () -> (vec record {
                               OrderId;
                               Order;
                             }) query;
  listUsers: () -> (vec record {
                          principal;
                          User;
                        }) query;
  listWishlistItems: () -> (vec record {
                                  WishlistId;
                                  WishlistItem;
                                }) query;
  listallOrders: () -> (vec record {
                              OrderId;
                              Order;
                            }) query;
  listallProducts: () -> (vec record {
                                SlugId;
                                Product;
                              }) query;
  searchproductsbycategory: (SlugId) -> (vec record {
                                               SlugId;
                                               Product;
                                             }) query;
  searchproductsbytitle: (text) -> (vec record {
                                          SlugId;
                                          Product;
                                        }) query;
  updateAddress: (Address, text, principal) -> (Result_9);
  updateCartItems: (CartId, nat8, text, text) -> (Result_8);
  updateCategory: (SlugId, text, text, bool, bool) -> (Result_7);
  updateContact: (ContactId, bool) -> (Result_6);
  updateOrderStatus: (OrderId, text) -> (Result_3);
  updatePaymentstatus: (OrderId, text) -> (Result_5);
  updateProduct: (SlugId, UserProduct, vec VariantSize, vec VariantColor) ->
   (Result_4);
  updateTrackingUrl: (OrderId, text) -> (Result_3);
  updateUser: (text, text, text) -> (Result_2);
  updateWishlistItems: (WishlistId) -> (Result_1);
  updatevariant: (SlugId, text, text, nat, float64, float64) -> (Result);
}
