type wishlistItemobject = 
 record {
   userprincipal: principal;
   wishlistItem: List;
 };
type cartItemobject = 
 record {
   cartItemlist: List_1;
   userprincipal: principal;
 };
type WishlistItem = 
 record {
   color: text;
   product_slug: text;
   size: text;
   time_created: Time;
   time_updated: Time;
 };
type Variants = 
 record {
   color: text;
   inventory: nat;
   product_slug: SlugId;
   size: text;
   variant_price: float64;
   variant_sale_price: float64;
   variant_slug: SlugId;
 };
type VariantSize = record {size: text;};
type VariantColor = 
 record {
   color: text;
   img1: text;
   img2: text;
   img3: text;
   inventory: nat;
   variant_price: float64;
   variant_sale_price: float64;
 };
type UserProduct = 
 record {
   active: bool;
   category: SlugId;
   description: text;
   newArrival: bool;
   title: text;
   trending: bool;
 };
type UserContact = 
 record {
   contact_number: text;
   email: text;
   message: text;
   name: text;
 };
type UserAddress = 
 record {
   address_type: text;
   addressline1: text;
   addressline2: text;
   city: text;
   country: text;
   email: text;
   firstname: text;
   lastname: text;
   phone_number: text;
   pincode: text;
   state: text;
 };
type User = 
 record {
   email: text;
   firstName: text;
   id: principal;
   lastName: text;
 };
type UpdatepaymentStatusError = 
 variant {
   OrderNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type UpdateVariantError = 
 variant {
   EmptyColor;
   EmptyProductSlug;
   EmptySize;
   ProductSlugNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
   VariantNotFound;
 };
type UpdateUserError = 
 variant {
   EmptyEmail;
   EmptyFirstName;
   EmptyLastName;
   UserNotAuthenticated;
   UserNotFound;
 };
type UpdateShippingAmountError = 
 variant {
   EmptyShippingAmount;
   UserNotAdmin;
 };
type UpdateProductError = 
 variant {
   EmptyTitle;
   ProductNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type UpdateOrderError = 
 variant {
   OrderNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type UpdateContactError = 
 variant {
   ContactNotFound;
   EmptyEmail;
   EmptyMessage;
   EmptyName;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type UpdateCategoryError = 
 variant {
   CategoryNotFound;
   EmptyName;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type UpdateAddressError = 
 variant {
   AddressNotFound;
   EmptyAddressLine1;
   EmptyCity;
   EmptyCountry;
   EmptyEmail;
   EmptyFirstName;
   EmptyLastName;
   EmptyPhoneNumber;
   EmptyPincode;
   EmptyState;
   UserNotAuthenticated;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type Time = int;
type StatisticalDetail = 
 record {
   totalCategories: nat;
   totalContacts: nat;
   totalOrders: nat;
   totalProducts: nat;
   totalUsers: nat;
 };
type SlugId = text;
type ShippingAmount = record {shipping_amount: float64;};
type Result__1 = 
 variant {
   Err: TransferError;
   Ok: nat;
 };
type Result_9 = 
 variant {
   err: OrderError;
   ok: record {
         Order;
         Result__1;
       };
 };
type Result_8 = 
 variant {
   err: UpdateAddressError;
   ok: Address;
 };
type Result_7 = 
 variant {
   err: UpdateCategoryError;
   ok: record {
         Category;
         Index;
       };
 };
type Result_6 = 
 variant {
   err: UpdateContactError;
   ok: Contact;
 };
type Result_5 = 
 variant {
   err: UpdatepaymentStatusError;
   ok: Order;
 };
type Result_4 = 
 variant {
   err: UpdateProductError;
   ok: record {
         Product;
         Index;
       };
 };
type Result_33 = 
 variant {
   err: CreateCartItemsError;
   ok: record {
         cartItemobject;
         Index;
       };
 };
type Result_32 = 
 variant {
   err: CreateWishlistItemError;
   ok: record {
         wishlistItemobject;
         Index;
       };
 };
type Result_31 = 
 variant {
   err: CreateAddressError;
   ok: record {
         Address;
         Index;
       };
 };
type Result_30 = 
 variant {
   err: CreateCategoryError;
   ok: record {
         Category;
         Index;
       };
 };
type Result_3 = 
 variant {
   err: UpdateOrderError;
   ok: Order;
 };
type Result_29 = 
 variant {
   err: CreateContactError;
   ok: Contact;
 };
type Result_28 = 
 variant {
   err: CreateProductError;
   ok: Product;
 };
type Result_27 = 
 variant {
   err: CreateVariantError;
   ok: Variants;
 };
type Result_26 = 
 variant {
   err: DeleteCartItemsError;
   ok;
 };
type Result_25 = 
 variant {
   err: DeleteCategoryError;
   ok;
 };
type Result_24 = 
 variant {
   err: DeleteContactError;
   ok;
 };
type Result_23 = 
 variant {
   err: DeleteOrderError;
   ok;
 };
type Result_22 = 
 variant {
   err: DeleteProductError;
   ok;
 };
type Result_21 = 
 variant {
   err: DeleteWishlistItemError;
   ok: wishlistItemobject;
 };
type Result_20 = 
 variant {
   err: DeleteAddressError;
   ok;
 };
type Result_2 = 
 variant {
   err: UpdateUserError;
   ok: record {
         User;
         Index;
       };
 };
type Result_19 = 
 variant {
   err: DeleteVariantError;
   ok;
 };
type Result_18 = 
 variant {
   err: GetAddressError;
   ok: Address;
 };
type Result_17 = 
 variant {
   err: GetCategoryError;
   ok: Category;
 };
type Result_16 = 
 variant {
   err: GetContactError;
   ok: Contact;
 };
type Result_15 = 
 variant {
   err: OrderError;
   ok: Order;
 };
type Result_14 = 
 variant {
   err: GetProductError;
   ok: Product;
 };
type Result_13 = 
 variant {
   err: GetUserError;
   ok: User;
 };
type Result_12 = 
 variant {
   err: GetPaymentStatusError;
   ok: text;
 };
type Result_11 = 
 variant {
   err: GetStatisticalDetailError;
   ok: StatisticalDetail;
 };
type Result_10 = 
 variant {
   err: GetVariantError;
   ok: Variants;
 };
type Result_1 = 
 variant {
   err: UpdateShippingAmountError;
   ok: ShippingAmount;
 };
type Result = 
 variant {
   err: UpdateVariantError;
   ok: Variants;
 };
type ProductId = nat;
type Product = 
 record {
   active: bool;
   category: SlugId;
   description: text;
   id: ProductId;
   newArrival: bool;
   slug: SlugId;
   time_created: Time;
   time_updated: Time;
   title: text;
   trending: bool;
   variantColor: vec VariantColor;
   variantSize: vec VariantSize;
 };
type OrderProduct = 
 record {
   color: text;
   id: text;
   img: text;
   quantity: nat8;
   sale_price: float64;
   size: text;
   title: text;
 };
type OrderId = text;
type OrderError = 
 variant {
   MissingData;
   OrderNotFound;
   PaymentAddressAlreadyUsed;
   PaymentFailed;
   UnableToCreate;
   UnableToUpdate;
   UserNotAuthenticated;
 };
type Order = 
 record {
   awb: text;
   id: OrderId;
   orderStatus: text;
   paymentAddress: text;
   paymentMethod: text;
   paymentStatus: text;
   products: vec OrderProduct;
   shippingAddress: Address;
   shippingAmount: ShippingAmount;
   subTotalAmount: float64;
   timeCreated: Time;
   timeUpdated: Time;
   totalAmount: float64;
   userid: principal;
 };
type NewOrder = 
 record {
   awb: text;
   orderStatus: text;
   paymentAddress: text;
   paymentMethod: text;
   paymentStatus: text;
   products: vec OrderProduct;
   shippingAddress: Address;
   shippingAmount: ShippingAmount;
   subTotalAmount: float64;
   totalAmount: float64;
   userid: principal;
 };
type List_1 = 
 opt record {
       CartItem;
       List_1;
     };
type List = 
 opt record {
       WishlistItem;
       List;
     };
type Index = nat64;
type GetVariantError = variant {VariantNotFound;};
type GetUserError = variant {UserNotFound;};
type GetStatisticalDetailError = variant {UserNotAdmin;};
type GetProductError = variant {ProductNotFound;};
type GetPaymentStatusError = variant {OrderNotFound;};
type GetExchangeRateResult = 
 variant {
   Err: ExchangeRateError;
   Ok: ExchangeRate;
 };
type GetContactError = 
 variant {
   ContactNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type GetCategoryError = variant {CategoryNotFound;};
type GetAddressError = variant {AddressNotFound;};
type ExchangeRateMetadata = 
 record {
   base_asset_num_queried_sources: nat64;
   base_asset_num_received_rates: nat64;
   decimals: nat32;
   forex_timestamp: opt nat64;
   quote_asset_num_queried_sources: nat64;
   quote_asset_num_received_rates: nat64;
   standard_deviation: nat64;
 };
type ExchangeRateError = 
 variant {
   AnonymousPrincipalNotAllowed;
   CryptoBaseAssetNotFound;
   CryptoQuoteAssetNotFound;
   FailedToAcceptCycles;
   ForexAssetsNotFound;
   ForexBaseAssetNotFound;
   ForexInvalidTimestamp;
   ForexQuoteAssetNotFound;
   InconsistentRatesReceived;
   NotEnoughCycles;
   Other: record {
            code: nat32;
            description: text;
          };
   Pending;
   RateLimited;
   StablecoinRateNotFound;
   StablecoinRateTooFewRates;
   StablecoinRateZeroRate;
 };
type ExchangeRate = 
 record {
   base_asset: Asset;
   metadata: ExchangeRateMetadata;
   quote_asset: Asset;
   rate: nat64;
   timestamp: nat64;
 };
type DeleteWishlistItemError = 
 variant {
   UserNotAdmin;
   UserNotAuthenticated;
   WishlistItemNotFound;
   listisempty;
 };
type DeleteVariantError = 
 variant {
   UserNotAdmin;
   UserNotAuthenticated;
   VariantNotFound;
 };
type DeleteProductError = 
 variant {
   UserNotAdmin;
   UserNotAuthenticated;
 };
type DeleteOrderError = 
 variant {
   OrderNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type DeleteContactError = 
 variant {
   UserNotAdmin;
   UserNotAuthenticated;
 };
type DeleteCategoryError = 
 variant {
   UserNotAdmin;
   UserNotAuthenticated;
 };
type DeleteCartItemsError = 
 variant {
   CartItemNotFound;
   CartisEmpty;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type DeleteAddressError = 
 variant {
   AddressNotFound;
   UserNotAuthenticated;
 };
type CreateWishlistItemError = 
 variant {
   EmptyProductSlug;
   UserNotAdmin;
   UserNotAuthenticated;
   WishlistItemAlreadyExists;
 };
type CreateVariantError = 
 variant {
   EmptyColor;
   EmptyProductSlug;
   EmptySize;
   ProductSlugNotFound;
   UserNotAdmin;
   UserNotAuthenticated;
   VariantSlugAlreadyExists;
 };
type CreateProductError = 
 variant {
   CategoryNotFound;
   EmptyTitle;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type CreateContactError = 
 variant {
   ContactAlreadyExists;
   EmptyEmail;
   EmptyMessage;
   EmptyName;
 };
type CreateCategoryError = 
 variant {
   CategoryAlreadyExists;
   EmptyName;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type CreateCartItemsError = 
 variant {
   CartItemAlreadyExists;
   EmptyColor;
   EmptyProductSlug;
   EmptySize;
   ProductSlugAlreadyExists;
   UserNotAdmin;
   UserNotAuthenticated;
 };
type CreateAddressError = 
 variant {
   EmptyAddressLine1;
   EmptyCity;
   EmptyCountry;
   EmptyEmail;
   EmptyFirstName;
   EmptyLastName;
   EmptyPhoneNumber;
   EmptyPincode;
   EmptyState;
   UserNotAuthenticated;
 };
type ContactId = text;
type Contact = 
 record {
   contact_number: text;
   email: text;
   id: ContactId;
   message: text;
   name: text;
   time_created: Time;
   time_updated: Time;
 };
type Category = 
 record {
   active: bool;
   category_img: text;
   featured: bool;
   name: text;
   slug: SlugId;
 };
type CartItem = 
 record {
   color: text;
   product_slug: text;
   quantity: nat8;
   size: text;
   time_created: Time;
   time_updated: Time;
 };
type AssetClass = 
 variant {
   Cryptocurrency;
   FiatCurrency;
 };
type Asset = 
 record {
   class: AssetClass;
   symbol: text;
 };
type Address = 
 record {
   address_type: text;
   addressline1: text;
   addressline2: text;
   city: text;
   country: text;
   email: text;
   firstname: text;
   id: text;
   lastname: text;
   phone_number: text;
   pincode: text;
   state: text;
 };
service : {
  addtoCartItems: (text, text, text, nat8) -> (Result_33);
  addtoWishlist: (text, text, text) -> (Result_32);
  clearallcartitmesbyprincipal: () -> (Result_26);
  createAddress: (UserAddress) -> (Result_31);
  createCategory: (text, text, bool, bool) -> (Result_30);
  createContact: (UserContact) -> (Result_29);
  createProduct: (UserProduct, vec VariantSize, vec VariantColor) ->
   (Result_28);
  createVariant: (SlugId, text, text, nat, float64, float64) -> (Result_27);
  deleteCartItems: (text, text, text) -> (Result_26);
  deleteCategory: (SlugId) -> (Result_25);
  deleteContact: (ContactId) -> (Result_24);
  deleteOrder: (OrderId) -> (Result_23);
  deleteProduct: (SlugId) -> (Result_22);
  deleteWishlistItems: (text, text, text) -> (Result_21);
  deleteaddress: (text) -> (Result_20);
  deletevariant: (SlugId) -> (Result_19);
  getAddress: (text) -> (Result_18);
  getCallerCartItems: (nat, nat) ->
   (record {
      current_page: nat;
      data: vec CartItem;
      total_pages: nat;
    });
  getCategory: (SlugId) -> (Result_17);
  getContact: (ContactId) -> (Result_16);
  getOrder: (text) -> (Result_15);
  getProduct: (SlugId) -> (Result_14);
  getUserdetailsbycaller: () -> (Result_13);
  getUserdetailsbyid: (principal) -> (Result_13);
  get_exchange_rates: (Asset, Asset) -> (GetExchangeRateResult);
  getpaymentstatus: (text) -> (Result_12);
  getshippingamount: () -> (ShippingAmount) query;
  getstatisticaldetailforadmin: () -> (Result_11);
  getvariant: (SlugId) -> (Result_10);
  isAdmin: (principal) -> (bool);
  listCategories: (nat, nat) ->
   (record {
      current_page: nat;
      data: vec Category;
      total_pages: nat;
    });
  listContacts: (nat, nat) ->
   (record {
      current_page: nat;
      data: vec Contact;
      total_pages: nat;
    });
  listUserAddresses: () -> (vec Address);
  listUsers: (nat, nat) ->
   (record {
      current_page: nat;
      data: vec User;
      total_pages: nat;
    });
  listWishlistItems: (nat, nat) ->
   (record {
      current_page: nat;
      data: vec WishlistItem;
      total_pages: nat;
    });
  listallOrders: (nat, nat) ->
   (record {
      current_page: nat;
      data: vec Order;
      total_pages: nat;
    });
  listallProducts: (nat, nat) ->
   (record {
      current_page: nat;
      data: vec Product;
      total_pages: nat;
    });
  place_order: (NewOrder, principal, principal, nat, variant {
                                                       ckbtc;
                                                       icp;
                                                     }) -> (Result_9);
  updateAddress: (Address, text, principal) -> (Result_8);
  updateCategory: (SlugId, text, text, bool, bool) -> (Result_7);
  updateContact: (ContactId, bool) -> (Result_6);
  updateOrderStatus: (OrderId, text) -> (Result_3);
  updatePaymentstatus: (OrderId, text) -> (Result_5);
  updateProduct: (SlugId, UserProduct, vec VariantSize, vec VariantColor) ->
   (Result_4);
  updateTrackingUrl: (OrderId, text) -> (Result_3);
  updateUser: (text, text, text) -> (Result_2);
  updateshippingamount: (ShippingAmount) -> (Result_1);
  updatevariant: (SlugId, text, text, nat, float64, float64) -> (Result);
}
